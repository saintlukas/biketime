{
  "name": "waitress",
  "description": "Simple flow control for multiple parallel async calls.",
  "author": {
    "name": "Adam Blackburn",
    "email": "adam@ifit.com"
  },
  "version": "0.1.2",
  "main": "index.js",
  "keywords": [
    "flow-control",
    "flow",
    "waitress",
    "async",
    "parallel",
    "callback"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/ifit/waitress.git"
  },
  "homepage": "https://github.com/ifit/waitress",
  "readme": "\n### Basic Usage\n\n```javascript\nvar done = waitress(count, cb);\n```\n\nWaitress returns a function, `done`, that will wait to be called `count` times before executing the `cb` passed into it.\n\n```javascript\nvar done = waitress(3, function(err) {\n  if (err) throw err;\n});\n\ndone();\ndone(new Error('oh noes')); // causes callback to be fired with an error condition\ndone(false); // also causes callback to be fired with an error condition\n```\n\n### Getting results\n\nIf done receives a second parameter, waitress will add that to an array,\nwhich will be the second parameter given to the callback, as long as it\nreceives no errors.\n\nThe array will be built in the order the data is received, not the order\ndone appears in your code.\n\n```javascript\nvar done = waitress(3, function(err, result) {\n  if (err) throw err;\n  result === ['a', 'b', 'c'];\n});\n\ndone(null, 'a');\ndone(null, 'b');\ndone(null, 'c');\n```\n",
  "readmeFilename": "README.md",
  "_id": "waitress@0.1.2",
  "dist": {
    "shasum": "130b862b7ec629866ba330106c450ddeab950fda"
  },
  "_from": "waitress@>=0.0.2"
}
